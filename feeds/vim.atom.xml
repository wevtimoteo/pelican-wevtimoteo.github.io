<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wevtimoteo - vim</title><link href="http://wevtimoteo.github.io/" rel="alternate"></link><link href="http://wevtimoteo.github.io/feeds/vim.atom.xml" rel="self"></link><id>http://wevtimoteo.github.io/</id><updated>2014-10-06T23:10:00-04:00</updated><entry><title>Configurando ruby correto dentro de plugins do vim</title><link href="http://wevtimoteo.github.io/configurando-ruby-correto-dentro-de-plugins-do-vim.html" rel="alternate"></link><published>2014-10-06T23:10:00-04:00</published><updated>2014-10-06T23:10:00-04:00</updated><author><name>Weverton do Couto Timoteo</name></author><id>tag:wevtimoteo.github.io,2014-10-06:/configurando-ruby-correto-dentro-de-plugins-do-vim.html</id><summary type="html">&lt;p&gt;Primeiro post de 2015 e primeiro post na plataforma Pelican depois da migração do &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; para o &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. Depois escrevo sobre como foi essa migração.&lt;/p&gt;
&lt;p&gt;Já tinha lido muitos artigos a respeito de &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic Complexity&lt;/a&gt;, mas nunca tentei colocar algum script para avaliar meu código.&lt;/p&gt;
&lt;p&gt;Antes tarde que nunca, encontrei …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Primeiro post de 2015 e primeiro post na plataforma Pelican depois da migração do &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; para o &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. Depois escrevo sobre como foi essa migração.&lt;/p&gt;
&lt;p&gt;Já tinha lido muitos artigos a respeito de &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic Complexity&lt;/a&gt;, mas nunca tentei colocar algum script para avaliar meu código.&lt;/p&gt;
&lt;p&gt;Antes tarde que nunca, encontrei o plugin &lt;a href="https://github.com/fousa/vim-flog"&gt;vim-flog&lt;/a&gt; que é um fork do &lt;a href="https://github.com/skammer/vim-ruby-complexity"&gt;vim-ruby-complexity&lt;/a&gt;; que como o nome já diz, serve para avaliar a Complexidade Ciclomática dentro de scripts .rb.&lt;/p&gt;
&lt;p&gt;Acontece que esse plugin executa código ruby dentro do arquivo &lt;code&gt;.vim&lt;/code&gt; (caso queira saber mais: &lt;a href="http://mattmargolis.net/scripting_vim_with_ruby.pdf"&gt;Scripting Vim with Ruby&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Até então, isso não deveria ser um problema. Acontece que quando o script rodava:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;EOF&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flog&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Flog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ocorria um erro na linha &lt;code&gt;require 'flog'&lt;/code&gt; que não encontrava a &lt;code&gt;gem&lt;/code&gt;, apesar de eu já ter instalado no meu &lt;code&gt;ruby&lt;/code&gt; local usando &lt;code&gt;gem install flog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Tentei entender o problema olhando o &lt;code&gt;$GEM_PATH&lt;/code&gt;, &lt;code&gt;$GEM_ROOT&lt;/code&gt; e &lt;code&gt;$GEM_HOME&lt;/code&gt; dentro do código do plugin, no entanto, ambos estavam vazios.&lt;/p&gt;
&lt;p&gt;Parti para outro caminho e olhei o path do ruby executado adicionando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="vg"&gt;$:&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flog&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;$:&lt;/code&gt; serve para imprimir o path de onde o &lt;code&gt;ruby&lt;/code&gt; é procurado (tente rodar isso dentro do &lt;code&gt;irb&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Nesse comando, percebi que o &lt;code&gt;ruby&lt;/code&gt; que estava sendo executado era o que vem juntamente do OS X Yosemite (2.x) e não o meu &lt;code&gt;ruby&lt;/code&gt; do &lt;code&gt;rbenv&lt;/code&gt; (alternativa ao &lt;code&gt;rvm&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Como eu sempre fiz upgrade nos releases do &lt;code&gt;OS X&lt;/code&gt; e nunca um clean install.
Achei um report do bug no &lt;a href="https://github.com/dotphiles/dotzsh#mac-os-x"&gt;path_helper&lt;/a&gt;, para resolver isso, basta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod ugo-x /usr/libexec/path_helper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Segue trecho do link acima caso o link se torne obsoleto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path_helper is intended to make it easier for installers to add new paths to the environment without having to edit shell configuration files by adding a file with a path to the /etc/paths.d directory.

Unfortunately, path_helper always reads paths from /etc/paths set by Apple then paths from /etc/paths.d set by third party installers, and lastly paths from the PATH environment variable set by the parent process, which ultimately is set by the user with export PATH=... Thus, it reorders path priorities, and user /bin directories meant to override system /bin directories end up at the tail of the array.
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category><category term="ruby"></category><category term="vim plugins"></category></entry><entry><title>Abrindo arquivos alterados no Git com seu $EDITOR</title><link href="http://wevtimoteo.github.io/abrindo-arquivos-alterados-no-git-com-seu-editor.html" rel="alternate"></link><published>2013-03-08T15:13:00-04:00</published><updated>2013-03-08T15:13:00-04:00</updated><author><name>Weverton do Couto Timoteo</name></author><id>tag:wevtimoteo.github.io,2013-03-08:/abrindo-arquivos-alterados-no-git-com-seu-editor.html</id><summary type="html">&lt;p&gt;Recomeçando o trabalho no início do dia:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git st&lt;/code&gt; (git status)&lt;/p&gt;
&lt;p&gt;E obtenho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
# modified:   Gemfile
# modified:   Gemfile.lock
# modified:   app/api/company …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recomeçando o trabalho no início do dia:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git st&lt;/code&gt; (git status)&lt;/p&gt;
&lt;p&gt;E obtenho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
# modified:   Gemfile
# modified:   Gemfile.lock
# modified:   app/api/company.rb
# modified:   app/helpers/authentication_helper.rb
# modified:   config/boot.rb
# modified:   config/initializers/app_config.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pensei: seria legal, automaticamente abrir esses arquivos no meu $EDITOR.&lt;/p&gt;
&lt;p&gt;Um simples &lt;code&gt;git status --short&lt;/code&gt; resolveria isso, adicionado ao awk e o próprio $EDITOR:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$EDITOR $(git status --short | awk '$1 ~ /^M$/ {print $2}')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Isso fará com que todos os arquivos modificados sejam abertos no seu $EDITOR favorito. Se for &lt;code&gt;vim&lt;/code&gt;, todos os arquivos serão abertos em buffers. Para abrir em uma abas:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$EDITOR -p $(git status --short | awk '$1 ~ /^M$/ {print $2}')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Depois disso pensei em usar em alias. Mas usar &lt;code&gt;gitedit&lt;/code&gt; seria muito chato, então fiz essa modificação no meu &lt;a href="https://github.com/wolcanus/dotfiles/commit/4321444655acae64b05ee02faad7f463df19aade"&gt;dotfiles&lt;/a&gt; para poder utilizar um simples:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git edit&lt;/code&gt;&lt;/p&gt;</content><category term="vim macos bash"></category></entry><entry><title>Salvando um arquivo como root sem fechar e abrir o Vim</title><link href="http://wevtimoteo.github.io/salvando-um-arquivo-como-root-sem-fechar-e-abrir-o-vim.html" rel="alternate"></link><published>2013-03-01T11:29:00-04:00</published><updated>2013-03-01T11:29:00-04:00</updated><author><name>Weverton do Couto Timoteo</name></author><id>tag:wevtimoteo.github.io,2013-03-01:/salvando-um-arquivo-como-root-sem-fechar-e-abrir-o-vim.html</id><summary type="html">&lt;p&gt;Seguindo a dica do &lt;a href="http://blog.lucascaton.com.br/"&gt;Lucas Catón&lt;/a&gt;: algumas vezes abrimos um arquivo que não temos permissão de escrita.&lt;/p&gt;
&lt;p&gt;Mas já alteramos seu conteúdo =/&lt;/p&gt;
&lt;p&gt;Ao invés de sair do Vim e abrir o arquivo como sudo/sudo -u, podemos executar:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pronto! Nada de sair e entrar no vim por …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seguindo a dica do &lt;a href="http://blog.lucascaton.com.br/"&gt;Lucas Catón&lt;/a&gt;: algumas vezes abrimos um arquivo que não temos permissão de escrita.&lt;/p&gt;
&lt;p&gt;Mas já alteramos seu conteúdo =/&lt;/p&gt;
&lt;p&gt;Ao invés de sair do Vim e abrir o arquivo como sudo/sudo -u, podemos executar:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pronto! Nada de sair e entrar no vim por problemas de permissão de escrita!&lt;/p&gt;</content></entry></feed>