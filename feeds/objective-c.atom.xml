<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wevtimoteo</title><link href="http://wevtimoteo.github.io/" rel="alternate"></link><link href="http://wevtimoteo.github.io/feeds/objective-c.atom.xml" rel="self"></link><id>http://wevtimoteo.github.io/</id><updated>2014-10-06T23:10:00-04:00</updated><entry><title>O que significa 'Class Cluster' no iOS</title><link href="http://wevtimoteo.github.io/o-que-significa-class-cluster-no-ios.html" rel="alternate"></link><published>2014-10-06T23:10:00-04:00</published><updated>2014-10-06T23:10:00-04:00</updated><author><name>Weverton do Couto Timoteo</name></author><id>tag:wevtimoteo.github.io,2014-10-06:o-que-significa-class-cluster-no-ios.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Class Cluster&lt;/code&gt; é um design pattern usado no framework Foundation.&lt;/p&gt;
&lt;p&gt;O objetivo desse pattern é agrupar subclasses privadas a partir de uma superclasse pública abstrata.&lt;/p&gt;
&lt;h2&gt;Sem Class Cluster&lt;/h2&gt;
&lt;p&gt;Imagine o seguinte cenário: você precisa armazenar diversas medidas, milímetros, centímetros, metros, quilômetros.&lt;/p&gt;
&lt;p&gt;O que todas essas medidas possuem em comum? Elas podem ser convertidas (ex.: metros =&amp;gt; centímetros) e podem ser representadas por uma única classe.
No entanto, o armazenamento de cada uma delas pode ser diferente.&lt;/p&gt;
&lt;p&gt;Para lidar com este cenário poderíamos implementar da seguinte maneira:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprimento (superclasse)&lt;/li&gt;
&lt;li&gt;Milímetro&lt;/li&gt;
&lt;li&gt;Centímetro&lt;/li&gt;
&lt;li&gt;Metro&lt;/li&gt;
&lt;li&gt;Quilômetro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Comprimento&lt;/code&gt; é nossa superclasse que declara os métodos principais de operações que todas as outras subclasses terão em comum.&lt;/p&gt;
&lt;p&gt;Neste exemplo as subclasses são públicas, ou seja, você pode instanciá-las diretamente.&lt;/p&gt;
&lt;p&gt;O conceito é simples mas a interface começa a ficar complexa de acordo com a quantidade de subclasses.&lt;/p&gt;
&lt;h2&gt;Com Class Cluster&lt;/h2&gt;
&lt;p&gt;Com o mesmo cenário, vamos imaginar uma solução diferente: ao invés das subclasses públicas teremos apenas nossa superclasse pública. E como iremos instanciar uma subclasse irá depender do que nossa superclasse &lt;code&gt;Comprimento&lt;/code&gt; suporta.&lt;/p&gt;
&lt;p&gt;Agora é responsabilidade da superclasse dizer qual objeto deve ser criado a partir do método de classe que for chamado.&lt;/p&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WWLength *aMeter = [WWLength lengthWithMeter:1];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cada objeto retornado pelo seu método de factory pode pertencer a um tipo de instância da subclasse. Mas não se esqueça, neste caso a subclasse está oculta, você não a conhece, então nossa instância &lt;code&gt;aMeter&lt;/code&gt; é do tipo &lt;code&gt;WWLength&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esse é o conceito do Class Cluster, que é utilizado intensamente no framework Foundation.&lt;/p&gt;
&lt;p&gt;Dê uma olhada na documentação para obter mais informações de classes do Foundation que seguem esta abordagem: &lt;a href="https://developer.apple.com/library/ios/documentation/general/conceptual/DevPedia-CocoaCore/ClassCluster.html"&gt;Cocoa Core Class Cluters&lt;/a&gt;&lt;/p&gt;</summary><category term="ios"></category><category term="foundation"></category><category term="objective-c"></category><category term="class cluster"></category><category term="design pattern"></category></entry></feed>